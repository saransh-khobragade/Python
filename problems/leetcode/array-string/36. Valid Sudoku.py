# https://leetcode.com/problems/valid-sudoku/
# input [[".",".",".",".","5",".",".","1","."],[".","4",".","3",".",".",".",".","."],[".",".",".",".",".","3",".",".","1"],["8",".",".",".",".",".",".","2","."],[".",".","2",".","7",".",".",".","."],[".","1","5",".",".",".",".",".","."],[".",".",".",".",".","2",".",".","."],[".","2",".","9",".",".",".",".","."],[".",".","4",".",".",".",".",".","."]]
# Time Complexity n2
from typing import List
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        V={}
        H={}
        Q={}
        for x in range(9):
            for y in range(9):
                
                value = board[x][y]
                q = str(x//3) + str(y//3)

                
                if value!=".":
                    if (value,x) in V :
                        return False
                    elif (value,y) in H :
                        return False
                    elif (value,q) in Q :
                        return False
                    else:
                        V[(value,x)] = True
                        H[(value,y)] = True
                        Q[(value,q)]=True
                        
        return True


s = Solution()
board=[
    [".",".",".",".","5",".",".","1","."],
    [".","4",".","3",".",".",".",".","."],
    [".",".",".",".",".","3",".",".","1"],
    ["8",".",".",".",".",".",".","2","."],
    [".",".","2",".","7",".",".",".","."],
    [".","1","5",".",".",".",".",".","."],
    [".",".",".",".",".","2",".",".","."],
    [".","2",".","9",".",".",".",".","."],
    [".",".","4",".",".",".",".",".","."]]
print(s.isValidSudoku(board))
